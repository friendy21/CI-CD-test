# .github/workflows/main.yml - Fixed and Simplified
name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: friendy21/cicd-nomad-app
  # Hardcoded for testing - NEVER do this in production
  DOCKER_USERNAME: friendy21
  DOCKER_TOKEN: dckr_pat_TrLIn2QLrbBwY77IsPlkudXFK6U
  DROPLET_HOST: 137.184.85.0
  DROPLET_USER: root
  SSH_PORT: 22

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF uploads
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner on filesystem
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail build on vulnerabilities for testing
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3  # Updated to v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      actions: read  # Additional permission
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha  # Use GitHub Actions cache
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
    
    - name: Scan pushed Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'docker-scan.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3  # Updated to v3
      if: always()
      with:
        sarif_file: 'docker-scan.sarif'
        category: 'docker-image-scan'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: http://${{ env.DROPLET_HOST }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create SSH private key file
      run: |
        cat > ssh_private_key <<'EOF'
        -----BEGIN OPENSSH PRIVATE KEY-----
        # REPLACE THIS WITH YOUR ACTUAL SSH PRIVATE KEY
        # This is a placeholder - you need to replace this with your real key
        YOUR_ACTUAL_SSH_PRIVATE_KEY_CONTENT_HERE
        -----END OPENSSH PRIVATE KEY-----
        EOF
        chmod 600 ssh_private_key
    
    - name: Deploy to DigitalOcean
      run: |
        set -euo pipefail
        
        # Deploy using SSH
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ssh_private_key -p ${{ env.SSH_PORT }} ${{ env.DROPLET_USER }}@${{ env.DROPLET_HOST }} << 'ENDSSH'
        set -euo pipefail
        
        # Configuration
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}"
        CONTAINER_NAME="app-container"
        
        echo "Deploying image: ${IMAGE}"
        
        # Login to Docker Hub
        echo "${{ env.DOCKER_TOKEN }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin
        
        # Pull new image
        docker pull "${IMAGE}"
        
        # Stop and remove old container if exists
        docker stop "${CONTAINER_NAME}" 2>/dev/null || true
        docker rm "${CONTAINER_NAME}" 2>/dev/null || true
        
        # Start new container
        docker run -d \
          --name "${CONTAINER_NAME}" \
          --restart unless-stopped \
          --memory="512m" \
          --cpus="0.5" \
          --health-cmd="curl -f http://localhost:3000/health || exit 1" \
          --health-interval=30s \
          --health-timeout=10s \
          --health-retries=3 \
          --health-start-period=30s \
          -p 80:3000 \
          -e NODE_ENV=production \
          -e PORT=3000 \
          "${IMAGE}"
        
        echo "Deployment completed successfully!"
        docker ps --filter name="${CONTAINER_NAME}"
        
        # Cleanup old images
        docker image prune -af --filter "until=24h" || true
        ENDSSH
    
    - name: Verify deployment
      run: |
        sleep 10
        if curl -f --max-time 30 http://${{ env.DROPLET_HOST }}/health; then
          echo "✅ Application is healthy and running!"
          echo "🌐 Application URL: http://${{ env.DROPLET_HOST }}" 
        else
          echo "❌ Application health check failed"
          exit 1
        fi
    
    - name: Deployment summary
      if: always()
      run: |
        echo "### Deployment Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: [http://${{ env.DROPLET_HOST }}](http://${{ env.DROPLET_HOST }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
