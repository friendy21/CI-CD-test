# Multi-stage build for optimal image size and security
# Stage 1: Dependencies
FROM node:20-alpine AS deps
# Alpine Linux for smaller image size and better security

# Add necessary build tools for native dependencies
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy dependency files first for better layer caching
COPY package*.json ./

# Install production dependencies only
# Using npm ci for faster, more reliable builds
RUN npm ci --only=production && \
    npm cache clean --force

# Stage 2: Builder
FROM node:20-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package*.json ./

# Copy application source code
COPY . .

# Remove unnecessary files that shouldn't be in production
RUN rm -rf .git .github .gitignore README.md \
    *.sh *.nomad docker-compose*.yml \
    etc/ scripts/ tests/ test/ \
    .dockerignore Dockerfile* \
    .env* .eslintrc* .prettierrc*

# Stage 3: Production runtime
FROM node:20-alpine AS runner

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init curl

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/server.js ./
COPY --from=builder --chown=nodejs:nodejs /app/public ./public

# Set production environment
ENV NODE_ENV=production \
    PORT=3000

# Security: Drop all capabilities and run as non-root
USER nodejs

# Expose application port
EXPOSE 3000

# Health check with proper timeout and retry logic
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]
