# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/cicd-nomad-app

jobs:
  # Basic security scan without CodeQL (simpler, more reliable)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'  # Don't fail the build, just report
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: always() && !cancelled()  # Run even if security scan has warnings
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate tag
      id: tag
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to production
  deploy:
    name: Deploy to Production
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to server
      env:
        HOST: ${{ secrets.DROPLET_HOST }}
        USER: ${{ secrets.DROPLET_USER }}
        KEY: ${{ secrets.DROPLET_SSH_KEY }}
        PORT: ${{ secrets.SSH_PORT || '22' }}
      run: |
        # Check if secrets are set
        if [[ -z "$HOST" || -z "$USER" || -z "$KEY" ]]; then
          echo "‚ùå Deployment secrets not configured!"
          echo "Please set the following secrets in your repository:"
          echo "  - DROPLET_HOST (your server IP)"
          echo "  - DROPLET_USER (SSH username)"
          echo "  - DROPLET_SSH_KEY (SSH private key)"
          echo "  - DOCKER_USERNAME (Docker Hub username)"
          echo "  - DOCKER_TOKEN (Docker Hub access token)"
          echo ""
          echo "Use the setup script: ./scripts/setup-secure-secrets.sh"
          exit 1
        fi
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add host to known hosts
        ssh-keyscan -H -p "$PORT" "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Deploy script
        cat > deploy_remote.sh << 'DEPLOY_SCRIPT'
        #!/bin/bash
        set -e
        
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        CONTAINER_NAME="cicd-app"
        
        echo "üöÄ Starting deployment..."
        
        # Login to Docker Hub
        echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
        # Pull the latest image
        echo "üì¶ Pulling latest image..."
        docker pull $IMAGE || exit 1
        
        # Stop and remove old container
        echo "üîÑ Updating container..."
        docker stop $CONTAINER_NAME 2>/dev/null || true
        docker rm $CONTAINER_NAME 2>/dev/null || true
        
        # Run new container
        docker run -d \
          --name $CONTAINER_NAME \
          --restart unless-stopped \
          -p 80:3000 \
          -e NODE_ENV=production \
          $IMAGE
        
        # Wait for container to be healthy
        echo "‚è≥ Waiting for container to be healthy..."
        for i in {1..30}; do
          if docker exec $CONTAINER_NAME curl -f http://localhost:3000/health 2>/dev/null; then
            echo "‚úÖ Container is healthy!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Health check failed!"
            docker logs $CONTAINER_NAME
            exit 1
          fi
          sleep 2
        done
        
        # Cleanup
        docker image prune -f
        
        echo "‚úÖ Deployment completed successfully!"
        DEPLOY_SCRIPT
        
        # Execute deployment
        ssh -i ~/.ssh/deploy_key -p "$PORT" "$USER@$HOST" 'bash -s' < deploy_remote.sh
        
        # Verify deployment
        echo "üîç Verifying deployment..."
        sleep 5
        
        if curl -f -m 10 "http://$HOST/health" 2>/dev/null; then
          echo "‚úÖ Application is running and healthy!"
          echo "üåê URL: http://$HOST"
        else
          echo "‚ö†Ô∏è Could not verify deployment (firewall may be blocking)"
          echo "Please check manually: http://$HOST"
        fi
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key deploy_remote.sh
