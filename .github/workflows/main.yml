# .github/workflows/main.yml
# SECURE CI/CD Pipeline with Best Practices
name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/cicd-nomad-app
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
      
    - name: Run Trivy vulnerability scanner on filesystem
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        skip-dirs: 'node_modules,dist,coverage'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-fs'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript
    
    - name: Check for secrets with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci --audit=false
        npm audit fix --audit-level=high || true
    
    - name: Run linting
      run: npm run lint || echo "No linting configured"
    
    - name: Run tests
      run: npm test || echo "No tests configured"
    
    - name: Check dependencies for vulnerabilities
      run: npm audit --audit-level=high

  # Build and push Docker image
  build-and-push:
    name: Build and Push
    needs: [security-scan, code-quality]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate Dockerfile
      run: |
        docker run --rm -i hadolint/hadolint < Dockerfile || true
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:v0.12.0
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
          prefix=
          suffix=
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,format=short
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}},enable=${{ github.event_name == 'push' }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          BUILD_NUMBER=${{ github.run_number }}
        provenance: true
        sbom: true
        attestations: |
          type=provenance,mode=max
          type=sbom
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: sbom.spdx.json
        upload-artifact: true
    
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'docker-scan.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail after push, but report
        vuln-type: 'os,library'
    
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-scan.sarif'
        category: 'docker-image-scan'
    
    - name: Sign container image
      uses: sigstore/cosign-installer@v3
      
    - name: Sign the container image
      run: |
        cosign sign --yes \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  # Deploy to staging (automatic on main branch)
  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: http://${{ secrets.STAGING_HOST }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script_stop: true
        script: |
          set -euo pipefail
          
          # Configuration
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}"
          
          # Login to Docker
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          # Deploy with docker-compose
          cd /opt/app
          echo "IMAGE=${IMAGE}" > .env
          docker-compose pull
          docker-compose up -d --remove-orphans
          
          # Health check
          sleep 10
          curl -f http://localhost/health || exit 1
          
          # Cleanup
          docker system prune -af --volumes --filter "until=24h"

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: http://${{ secrets.DROPLET_HOST }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
    
    - name: Deploy to Production
      env:
        IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.SSH_PORT }} \
            ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} \
            'bash -s' < ./scripts/deploy-production.sh \
            "$IMAGE" \
            "$DOCKER_USERNAME" \
            "$DOCKER_TOKEN"
    
    - name: Verify deployment
      run: |
        sleep 15
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 http://${{ secrets.DROPLET_HOST }}/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Deployment successful - Health check passed"
            echo "### Deployment Successful ✅" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: [http://${{ secrets.DROPLET_HOST }}](http://${{ secrets.DROPLET_HOST }})" >> $GITHUB_STEP_SUMMARY
            echo "- **Image Digest**: \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ needs.build-and-push.outputs.image-version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "Attempt $attempt/$max_attempts failed with status: $response"
          attempt=$((attempt + 1))
          sleep 5
        done
        
        echo "❌ Health check failed after $max_attempts attempts"
        exit 1
    
    - name: Cleanup SSH
      if: always()
      run: |
        rm -rf ~/.ssh/deploy_key
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "### Deployment Failed ❌" >> $GITHUB_STEP_SUMMARY
        echo "Initiating rollback..." >> $GITHUB_STEP_SUMMARY
        # Add rollback logic here

  # Deploy to Nomad (optional)
  deploy-nomad:
    name: Deploy to Nomad
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: nomad
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Nomad
      run: |
        curl -L https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip -o nomad.zip
        unzip nomad.zip
        chmod +x nomad
        sudo mv nomad /usr/local/bin/
    
    - name: Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        # Update job file with new image
        sed -i "s|docker.io/friendy21/cicd-nomad-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}|g" cicd-app.nomad
        
        # Run the job
        nomad job run cicd-app.nomad

  # Notification job
  notify:
    name: Send Notifications
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send Slack notification
      if: vars.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
