name: Nomad Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Global permissions for the entire workflow
permissions:
  contents: read
  security-events: write
  actions: read
  packages: write
  pull-requests: write
  issues: write
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
  NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}

jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,python'
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'nomad-deployment'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/
          retention-days: 7

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run Trivy on built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-image.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image.sarif'
          category: 'trivy-image'

  # Deploy to Nomad
  deploy:
    name: Deploy to Nomad
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nomad
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install nomad
          nomad version

      - name: Configure Nomad client
        run: |
          echo "Configuring Nomad client..."
          cat > ~/.nomad_env <<EOF
          export NOMAD_ADDR="${{ env.NOMAD_ADDR }}"
          export NOMAD_TOKEN="${{ env.NOMAD_TOKEN }}"
          export NOMAD_REGION="global"
          export NOMAD_NAMESPACE="default"
          EOF
          source ~/.nomad_env

      - name: Validate Nomad job spec
        run: |
          source ~/.nomad_env
          if [ -f "nomad.hcl" ]; then
            echo "Validating Nomad job specification..."
            nomad job validate nomad.hcl
          else
            echo "Creating sample Nomad job spec..."
            cat > nomad.hcl <<'NOMAD_HCL'
          job "webapp" {
            datacenters = ["dc1"]
            type = "service"
            
            group "web" {
              count = 3
              
              network {
                port "http" {
                  static = 8080
                }
              }
              
              service {
                name = "webapp"
                port = "http"
                
                check {
                  type     = "http"
                  path     = "/health"
                  interval = "10s"
                  timeout  = "2s"
                }
              }
              
              task "app" {
                driver = "docker"
                
                config {
                  image = "${{ needs.build-and-push.outputs.image-tag }}"
                  ports = ["http"]
                  
                  auth {
                    username = "${{ github.actor }}"
                    password = "${{ secrets.GITHUB_TOKEN }}"
                  }
                }
                
                env {
                  NODE_ENV = "production"
                  PORT = "8080"
                }
                
                resources {
                  cpu    = 500
                  memory = 256
                }
              }
            }
          }
          NOMAD_HCL
            nomad job validate nomad.hcl
          fi

      - name: Plan Nomad deployment
        id: plan
        run: |
          source ~/.nomad_env
          echo "Planning Nomad deployment..."
          nomad job plan -diff -verbose nomad.hcl | tee plan-output.txt
          
          # Extract the job modify index for deployment
          JOB_MODIFY_INDEX=$(grep -oP 'Job Modify Index: \K\d+' plan-output.txt || echo "0")
          echo "job_modify_index=${JOB_MODIFY_INDEX}" >> $GITHUB_OUTPUT

      - name: Deploy to Nomad
        if: success()
        run: |
          source ~/.nomad_env
          echo "Deploying to Nomad cluster..."
          
          # Run the deployment with check-index if available
          if [ "${{ steps.plan.outputs.job_modify_index }}" != "0" ]; then
            nomad job run -check-index=${{ steps.plan.outputs.job_modify_index }} nomad.hcl
          else
            nomad job run nomad.hcl
          fi
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          nomad job status webapp

      - name: Verify deployment
        run: |
          source ~/.nomad_env
          echo "Verifying deployment status..."
          
          # Check job status
          nomad job status webapp
          
          # Check allocation status
          ALLOC_ID=$(nomad job status webapp | grep -A 1 "Allocations" | tail -1 | awk '{print $1}')
          if [ ! -z "$ALLOC_ID" ]; then
            nomad alloc status $ALLOC_ID
          fi
          
          # Monitor deployment for 60 seconds
          for i in {1..12}; do
            echo "Checking deployment status (attempt $i/12)..."
            if nomad job status webapp | grep -q "running"; then
              echo "✅ Deployment successful!"
              exit 0
            fi
            sleep 5
          done
          
          echo "⚠️ Deployment may still be in progress"

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const message = `${status} Deployment to Nomad: ${{ job.status }}`;
            
            // Create a comment on the commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 5

      - name: Prune old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-pre-release-versions: false
